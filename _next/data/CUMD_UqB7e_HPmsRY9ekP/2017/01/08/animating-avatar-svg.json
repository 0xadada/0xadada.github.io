{"pageProps":{"post":{"slugs":{"year":"2017","month":"01","day":"08","slug":"animating-avatar-svg"},"title":"Animating SVG with CSS","displayTitle":"Animating SVG with CSS","metaDescription":"How to use SVG and CSS to create dynamic imagery","metaKeywords":"graphics, vector, animation, css","metaImage":"/static/images/meta/apple-touch-icon.png","date":1483884720000,"author":"0xADADA","content":"<p>I finally got around to converting my avatar from a raster graphic to a vector\nformat. I wanted to be able to animate the polygons using JavaScript and CSS.\nAnother great advantage of a vector format is how the format lends itself to\ngenerate a PNG or JPG in any size.</p>\n<h2>Massaging the SVG File Format</h2>\n<p>First things first, I took the source image and ran it through the\n<a href=\"https://snorpey.github.io/triangulation/\">delaunay triangulation - image triangulation experiment</a>\nsoftware, experimenting with various values for blur, accuracy and point count.\nThe output of this software was a <code>512Kb</code> SVG file.</p>\n<p>Next I opened the file in <a href=\"https://inkscape.org/en/\">Inkscape</a>, a SVG vector\ngraphics editor to remove the polygons in the background, cleanup some awkward\npolys and make a few minor adjustments. Inkscape adds a bunch of metadata and\nadditional properties to the raw SVG that can be cleaned up.</p>\n<p>Once I was happy with the results of my tweaking in Inkscape, I saved the SVG\nand opened it in <a href=\"https://jakearchibald.github.io/svgomg/\">SVGOMG</a> a web-based\nSVG optimization GUI for the <a href=\"https://github.com/svg/svgo\">SVGO</a> suite of tools.\nThis tool will output a much smaller SVG file that is ready for either editing\nor delivery over HTTP. In this case, the file was reduced to <code>312Kb</code> a 40%\nreduction in file size, primarily by transforming point-based <code>&#x3C;polygon></code>\nelements to the more concise to <code>&#x3C;path></code> element.</p>\n<h2>Animation</h2>\n<p>With the SVG file ready, I moved on to the action animation work.</p>\n<p>The animation would be a series of CSS keyframes that would simply toggle the\nopacity level to produce a flickering affect. The artwork begins with all\nopacity set to <code>0</code> (transparent), and each keyframe incrementally toggles\nopacity until the last frame finally sets it to <code>1</code>.</p>\n<pre><code class=\"language-css\">.p {\n  /* each polygon \"path\" starts fully transparent */\n  opacity: 0;\n}\n\n/* a set of keyframes that incrementally toggle opacity, this */\n/* keyframes set is called \"slide-into-place\" */\n@keyframes slide-into-place {\n  0% {\n    opacity: 1;\n  }\n  5% {\n    opacity: 0;\n  }\n  15% {\n    opacity: 1;\n  }\n  17% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  55% {\n    opacity: 0;\n  }\n  60% {\n    opacity: 1;\n  }\n  75% {\n    opacity: 0.25;\n  }\n  85% {\n    opacity: 0.85;\n  }\n  90% {\n    opacity: 0;\n  }\n  95% {\n    opacity: 0.25;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n</code></pre>\n<p>Every <code>&#x3C;path></code> in the SVG document is given a classname <code>p</code> (for path), I then\nuse javascript to get references to these paths, and simply add a new classname\n<code>is-animated</code> to their <code>class</code> attribute. This classname will be used to attach\nthe keyframes to the SVG paths.</p>\n<pre><code class=\"language-css\">.p.is-animated {\n  /* sets the keyframes to use for animation */\n  animation-name: slide-into-place;\n  /* pause before animation starts */\n  animation-delay: 1s;\n  animation-timing-function: ease;\n  animation-direction: normal;\n  /* Run the animation only once */\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n</code></pre>\n<p>To attach the keyframe animation to the SVG <code>&#x3C;path></code>, the only think necessary\nis to add the <code>is-animated</code> classname to the element. We do this on <code>Line-A</code>.\nThis is done inside a loop that iterates over all the <code>&#x3C;path></code> elements.</p>\n<p>If I just add the <code>is-animated</code> class to the element, all polygons will flicker\nat the same time, looking like the entire image is flickering- which isn't what\nI want. To address this, I need to randomize the start-time of when each polygon\nbegins flickering. This makes each polygon flicker on its own timeline. I get a\nrandom number on <code>Line-B</code> and use that as a delay to begin the flickering.</p>\n<p><code>path.style.animationDelay</code> (on <code>Line-C</code>) is used to wait for a randomized\ntimeout (<code>Line-B</code>) period before animation starts.</p>\n<pre><code class=\"language-javascript\">function init() {\n  var paths = document.querySelectorAll(\"path\"),\n    i = 0,\n    randTimeout = null;\n  path = null;\n  for (i = 0; i &#x3C; paths.length; i++) {\n    let path = paths[i];\n    randTimeout = Math.floor(Math.random() * (1500 - 1) + 1); // Line-B\n    path.style.animationDelay = randTimeout + \"ms\"; // Line-C\n    path.classList.add(\"is-animated\"); // Line-A\n  }\n}\n</code></pre>\n<p>The above <code>init()</code> function is called once the SVG document has finished\nloading.</p>\n<pre><code class=\"language-html\">&#x3C;svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewbox=\"0 0 660 660\"\n  onload=\"init()\"\n>&#x3C;/svg>\n</code></pre>\n<h2>Result</h2>\n<p><object type=\"image/svg+xml\" data=\"/static/images/meta/avatar-animated.svg\"\nheight=\"660\" width=\"660\"> </object> <em>(Reload the page to view the animation\nagain)</em></p>\n","slug":"2017-01-08-animating-avatar-svg","license":"cc-by-nc-sa"}},"__N_SSG":true}