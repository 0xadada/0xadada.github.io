{"pageProps":{"post":{"slugs":{"year":"2015","month":"11","day":"15","slug":"javascript-the-good-parts"},"title":"JavaScript The Good Parts","displayTitle":"JavaScript The Good Parts","metaDescription":"Javascript The Good Parts notes","metaKeywords":"marketing, advertising","date":1447607460000,"author":"0xADADA","content":"<p><em>Notes from the book: JavaScript: The Good Parts by Douglas Crockford</em></p>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#javascript-the-good-parts\">JavaScript: The Good Parts</a>\n<ul>\n<li><a href=\"#primitives\">Primitives</a></li>\n<li><a href=\"#execution-flow\">Execution Flow</a></li>\n<li><a href=\"#equality\">Equality</a></li>\n<li><a href=\"#loops--enumeration\">Loops / Enumeration</a></li>\n<li><a href=\"#object-literals\">Object Literals</a></li>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li><a href=\"#delete\">Delete</a></li>\n<li><a href=\"#global-abatement\">Global Abatement</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n<li><a href=\"#reflection\">Reflection</a></li>\n<li><a href=\"#functions\">Functions</a></li>\n<li><a href=\"#prototype\">Prototype</a></li>\n<li><a href=\"#function-invocation-pattern\">Function Invocation Pattern</a></li>\n<li><a href=\"#constructor-invocation-pattern\">Constructor Invocation pattern</a></li>\n<li><a href=\"#closure\">Closure</a></li>\n</ul>\n</li>\n<li><a href=\"#modules\">Modules</a></li>\n<li><a href=\"#wtf\">WTF</a></li>\n</ul>\n<h2>JavaScript: The Good Parts</h2>\n<p>A walkthrough many of the useful code examples from Douglas Crockfords' seminal\nbook,\n<a href=\"http://shop.oreilly.com/product/9780596517748.do\">JavaScript: The Good Parts</a>.</p>\n<h3>Primitives</h3>\n<p>JavaScript Reserved words:</p>\n<pre><code class=\"language-javascript\">abstract\nboolean break byte\ncase catch char class const continue\ndebugger default delete do double\nelse enum export extends\nfalse final finally float for function\ngoto\nif implements import in instanceof int interface\nlong\nnative new null\npackage private protected public\nreturn\nshort static super switch synchronized\nthis throw throws transient true try typeof\nvar volatile void\nwhile with\n</code></pre>\n<p>Simple types</p>\n<pre><code class=\"language-javascript\">// Numbers: 1, 1.1, 1e10, 1e+10,\n// Strings: \"Hello\", 'hello'\n// Booleans: true, false\n// null\n// undefined\n// Object\n</code></pre>\n<p>Built in values</p>\n<pre><code class=\"language-javascript\">true\nfalse\nnull\nundefined\nNaN\nInfinity\n</code></pre>\n<p>JavaScript represents all numbers internally as a 64-bit floating point value\n(like Java's <code>double</code>).</p>\n<pre><code class=\"language-javascript\">// integer\n1 === 1.0  // true\n\n// fraction\n.1 === 0.1 // true\n\n// exponent: value is calculated by multiplying the part before the\n// e by 10 raised to the power of the part after the e.\n(1*10) * (1*10) === 1e2 // true\n1e2 === 100 // true\n\n// Infinity represents all values greater than:\n1.79769313486231570e+103\ntypeof Infinity === 'number'; // true\n</code></pre>\n<p>Numbers, strings and booleans are object like in that they have methods, but\nthey are immutable.</p>\n<p>Arrays, functions, regular expressions and objects are Objects. A simple object:</p>\n<pre><code class=\"language-javascript\">// simple object literal\nvar an_object = {};\n// simple object literal with 2 values (comma-separated)\nvar another_object = {\n  'my_value': 3.1,\n  'your_value': 3.2\n};\nanother_object.my_value == 3.1; // true\n\n// attempts to access undefined properties will throw TypeError\nanother_object.fake.my_value // Throws TypeError\n// Prevent TypeError by testing that all attributes exist before accessing\nanother_object.test &#x26;&#x26; another_object.test.test || \"none\" // \"none\"\n</code></pre>\n<p>Objects are class-free, which is to say that there is no constraint on the names\nof its properties or their values. The object doesn't need to be defined before\nit is instantiated.</p>\n<p>JavaScript has prototype linkage, meaning an object can inherit the properties\nof another object. This can be used to reduce object initialization time, memory\nconsumption and increase code reuse.</p>\n<h3>Execution Flow</h3>\n<p>Execution and flow statements.</p>\n<pre><code class=\"language-javascript\">// Conditional statements: if and switch\n// Looping statements: do, for, while\n// Disruptive statements: break, continue, return, throw\n</code></pre>\n<p>Falsy values. When conditional expressions evaluate to these values, the\nexpression will result in <code>false</code>.</p>\n<pre><code class=\"language-javascript\">false\nnull\nundefined\n''         // empty  string\n0\nNaN\n</code></pre>\n<p>Operators and statements of equality.</p>\n<pre><code class=\"language-javascript\">// Operator precedence\n. [] ()                   // Refinement and invocation\ndelete new typeof + - !   // Unary operators\n* / %                     // Multiplication, division, remainder\n+ -                       // Addition/concatenation, subtraction\n>= &#x3C;= > &#x3C;                 // Inequality\n=== !==                   // Equality\n&#x26;&#x26;                        // Logical and\n||                        // Logical or\n? :                       // Ternary\n</code></pre>\n<p>NaN</p>\n<pre><code class=\"language-javascript\">// NaN is a number value that is the result of an operation that\n// cannot produce a normal result. It is not equal to anything else,\n// including itself.\nNaN == NaN;  // false\nNaN === NaN; // false\n\n// Use isNaN to detect if a value is NaN\nisNaN(NaN);  // true\n</code></pre>\n<h3>Equality</h3>\n<p>Rule of thumb, the following expressions are all false using <code>===</code> or <code>!==</code> so\nuse these operators instead.</p>\n<pre><code class=\"language-javascript\">'c' + 'a' + 't' === 'cat'; // true\n'' == '0';                 // false\n0 == '';                   // true, both are falsy\n0 == '0';                  // true\nfalse == 'false';          // false\nfalse == '0';              // true\nfalse == undefined;        // false\nfalse == null;             // false\nnull == undefined;         // true\n</code></pre>\n<h3>Loops / Enumeration</h3>\n<p>The <code>for in</code> statement can loop over all properties of an object, but will\ninclude all object types (including functions) as well as all objects along the\nprototype chain. The <code>for in</code> operator enumerates the property names on an\nobject.</p>\n<pre><code class=\"language-javascript\">var animal_names = {\n    'dog': 'Piper',\n    'cat': 'Snookins',\n    'goat': 'Mr J'\n};\nfor( var animal in animal_names ) {\n    console.log( animal, animal_names[animal] );\n}\n> dog Piper\n> cat Snookins\n> goat Mr J\n</code></pre>\n<p>It is important to know the names can be in any order and can be any type\nincluding functions.</p>\n<h3>Object literals</h3>\n<p>Object literal - pair of curly braces surrounding zero or more name: value\npairs.</p>\n<pre><code class=\"language-javascript\">var empty_object = {};\nvar stooge = {\n    \"first_name\" : \"Jerome\",\n    \"last_name\" : \"Howard\",\n    'nickname' : 'Jer'\n};\nvar jer1 = stooge['first_name'];\nconsole.log(jer1);  // \"Jerome\"\nvar jer2 = stooge.first_name;\nconsole.log(jer2); // \"Jerome\"\nvar jer3 = stooge.favorite &#x26;&#x26; stooge.favorite.color; // return undefined\nconsole.log(jer3); // undefined\n</code></pre>\n<h3>Arrays</h3>\n<p>Arrays have a length property.</p>\n<pre><code class=\"language-javascript\">var empty = [];\nvar numbers = [\n    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\n    'eight', 'nine'\n];\nempty.length\n> 0\nnumbers.length\n> 10\n</code></pre>\n<p>Objects have no length property</p>\n<pre><code class=\"language-javascript\">var numbers_object = {\n    '0': 'zero',\n    '1': 'one',\n    '2': 'two',\n    '3': 'three',\n    '4': 'four',\n    '5': 'five',\n    '6': 'six',\n    '7': 'seven',\n    '8': 'eight',\n    '9': 'nine'\n};\nnumbers_object.length\n> undefined\n\nvar myArray = [];\nmyArray.length\n> 0\n</code></pre>\n<p>Arbitrary array indexes can be set, although there may not be items populating\nthe array before it.</p>\n<pre><code class=\"language-javascript\">// myArray = [];\nmyArray[1001] = true; // create and set value of index 1001 to true\nconsole.log(myArray.length); // 1002 OMG!!\n\nvar arrayItemCount = 0;\nfor(var item in myArray) {\n    arrayItemCount += 1;\n}\nconsole.log('myArray counted items: ' + arrayItemCount);\n</code></pre>\n<p>To delete from an array, use <code>Array.splice()</code>. This function takes 3 arguments,\n<code>start</code> the index to start adding/removing items, <code>deleteCount</code> the number of\nitems to remove/replace, and finally n-arguments for the addition n-items to add\nto the array.</p>\n<pre><code class=\"language-javascript\">var animals = ['cat', 'dog', 'pork', 'pig', 'fish'];\n\n// remove 'pork'\na.splice(2,1)\n// removed 'pork'\na\n> ['cat', 'dog', 'pig', 'fish']\n\n// add 'snake' before item 2.\na.splice(2,0,'snake')\n> ['cat', 'dog', 'snake', 'pig', 'fish']\n</code></pre>\n<p>viola!</p>\n<h3>Delete</h3>\n<p>The <code>delete</code> operator removes a property from an object. If will not remove the\nproperty if it only exists on parent objects along the prototype chain. It is\nuseful for removing the property from a leaf object so that the property along\nthe prototype chain is used.</p>\n<h3>Global Abatement</h3>\n<p>Global variables in general weaken the portability and resiliency of programs,\nbut in the case they're necessary, aim to limit them to a single global\nvariable. This is done by attaching all properties to a single global variable.</p>\n<pre><code class=\"language-javascript\">var MYAPP = {};\nMYAPP.views = {};\n</code></pre>\n<p>This will reduce namespace or scope collisions with other applications or\nlibraries.</p>\n<h3>Reference</h3>\n<p>JavaScript passes objects around by reference, never by value.</p>\n<pre><code class=\"language-javascript\">var x = {\n    fn: 'Jerome',\n    ln: 'Howard',\n    nn: 'Jer'\n};\nvar y = x.nn; // new variable value: 'Jer'\nx.nn = 'curly';\nconsole.log(y); // 'curly'\n</code></pre>\n<h3>Reflection</h3>\n<p>Reflection is the ability of a program to introspect is own code at runtime.</p>\n<p>Javascript offers the <code>typeof</code> operator to check the type of a property, and\n<code>hasOwnProperty()</code> which return true if the property exists directly on an\nobject, false if it does not (and possibly exists up the prototype chain.)</p>\n<pre><code class=\"language-javascript\">var a_var = \"a message\";\ntypeof a_var;\n> 'string'\n\nvar an_object = {\n    a_prop: true;\n};\nan_object.hasOwnProperty('a_prop');\n> true\n</code></pre>\n<h3>Functions</h3>\n<blockquote>\n<p>\"The craft of programming is the factoring of a set of requirements into a set\nof functions and data structures.\" <cite>Douglas Crockford</cite></p>\n</blockquote>\n<p>Functions encapsulate a set of statements. They enable code reuse, information\nhiding and behavior composition.</p>\n<p>Functions in JavaScript are objects. Objects are collections of name-value pairs\nthat have a hidden prototype link to <code>Object.prototype</code>. The Objects produced\nfrom object literals are linked to <code>Object.prototype</code>. Function objects are\nlinked to <code>Function.prototype</code>– which is linked to <code>Object.prototype</code>.\nFunctions are also created with two additional hidden properties: the function's\nexecution context (lexical scope) and the source code that implements the\nfunction.</p>\n<p>Functions have a <code>prototype</code> property whos value is an object with a\n<code>constructor</code> property whos value is the function. This is distinct from the\nhidden link to <code>Function.prototype</code>. [](#ToDo: this needs to be fleshed-out in\nmore detail)</p>\n<p>When invoked, functions receive two additional parameters: <code>this</code> and\n<code>arguments</code>. The value of <code>this</code> depends on how the function was invoked\n(invoked as method, invoked as function, invoked as constructor, and invoked as\napply). The value of <code>arguments</code> is an array-like object (in that the object has\na <code>length</code> property) of all parameters passed to the function when invoked.</p>\n<h4>Method Invocation Pattern</h4>\n<p>When a function is created as a property of an object, it is called a method.\nWhen a method is invoked, it is bound to the object it is a property of. You can\ntell a function is invoked as a method when it uses a refinement; a <code>.</code> notation\nto call the function.</p>\n<p>Functions invoked as a method can access the bound object using the <code>this</code>\nreference to access other properties and values on that object. The methods\n<code>this</code> object is late-bound at function invocation time. This makes methods that\nmake references to <code>this</code> more portable. These type of objects are called public\nmethods.</p>\n<pre><code class=\"language-javascript\">var myObj = {\n  value: 2,\n  increment: function(inc) {\n    this.value += typeof inc === \"number\" ? inc : 1;\n  }\n};\n</code></pre>\n<p>The binding of <code>this</code> happens very late, at invocation time. A method can use\n<code>this</code> to retrieve values from the object, or modify the object.</p>\n<p>Crockford introduces the <code>method</code> method, it is used throughout the book to\ndefine new methods on existing objects. Crockford attaches it to the <code>Function</code>\nprototype, so it is available to all objects.</p>\n<pre><code class=\"language-javascript\">Function.prototype.method = function(name, func) {\n  this.prototype[name] = func;\n  return this;\n};\n</code></pre>\n<p>A use of the <code>method</code> method would be to define a new function <code>predictLength</code>\non the String object. This function will return the predicted length a string\nwhen concatenated with the existing string.</p>\n<pre><code class=\"language-javascript\">// use Crockfords' `method` method on the `String` object.\nString.method(\"predictLength\", function(arg) {\n  var len = this.length,\nargLen = arg.len,\nnextLen = len + argLen;\n  var message = \"Predicted length is %0 for string '%1'\"\n    .replace(\"%0\", nextLen)\n    .replace(\"%1\", arg);\n  console.log(message);\n  return nextLen;\n});\n</code></pre>\n<h4>Function Invocation Pattern</h4>\n<p>When a function is not a property of an object, it is invoked directly as a\nfunction:</p>\n<pre><code class=\"language-javascript\">var sum = add(3, 4);\n</code></pre>\n<p>Any function invoked in this pattern, the <code>this</code> value is bound to the global\nobject. This becomes confusing for many developers when defining objects with\nsub-functions that expect the value of the <code>this</code> value to refer to the\ncontaining object. A example of problematic code illustrates:</p>\n<pre><code class=\"language-javascript\">var brokenObj = {\n  value: 2,\n  double: function() {\n  var helper = function() {\n    // broken, the value of `this` in `this.value` refers to the global\n    // Object, not `brokenObj`.\n    this.value = this.value * 2; // fails, global Object.value set to NaN\n};\nhelper();\n  }\n};\n</code></pre>\n<h4>Constructor Invocation Pattern</h4>\n<p>If a function is invoked with the <code>new</code> prefix e.g.\n<code>var x = new Status('confused')</code>, then a new object is created and returned with\na link to the value of the function's <code>prototype</code> property. The value of <code>this</code>\nis bound to the new object.</p>\n<pre><code class=\"language-javascript\">var Status = function(status) {\n  this.status = status;\n  this.valueOf = function() {\n    console.info(`status ${this.status}`);\n    return this.status;\n  };\n};\nvar happy = new Status(\"happy\");\ntypeof Status === \"function\"; // true\ntypeof happy === \"object\";    // true\nhappy.valueOf() === \"happy\";  // true\n(\"status happy\");\ntrue;\n</code></pre>\n<h4>Apply Invocation Pattern</h4>\n<p>The <code>apply</code> method is available on every function. In the constructor invocation\npattern above, the <code>valueOf</code> method was bound to the local object. Instead, the\nthe <code>apply</code> method allows the developer supply an arbitrary value for <code>this</code>, in\neffect allowing the developer to apply the method to any object rather than to\nthe object it is currently bound too.</p>\n<pre><code class=\"language-javascript\">var DoMath = function(x, y) {\n  this.x = x;\n  this.y = y;\n  this.sum = function() {\n    return this.x + this.y;\n  };\n};\nvar oneTwo = new DoMath(1, 2);\noneTwo.sum() === 3; // true\n\n// now we can force sum() to reference an object that we pass to the apply() method\nvar threeFour = {\n  x: 3,\n  y: 4\n};\noneTwo.sum.apply(threeFour, null);\n7;\n</code></pre>\n<h3>Prototype</h3>\n<p>Every object is linked to a prototype from which it inherits properties. All\nobjects created with object literal syntax are linked to <code>Object.prototype</code>.\nWhen creating new objects, we can select which object it inherits from. We can\nuse a method named <code>Object.create</code> to implement this behavior.</p>\n<p><code>Object.create</code></p>\n<pre><code class=\"language-javascript\">if( typeof Object.create !== 'function') {\n    Object.create = function(o) {\n        var F = function() {};\n        F.prototype = o;\n        return new F();\n    }\n}\n</code></pre>\n<p>The prototype link is used only in retrieval. If we try to retrieve a property\nvalue from an object, it will either return the value on the object itself, or\nlook up to <strong>its</strong> prototype, and so on, until the lookup finds the property or\n<code>undefined</code> is returned if nowhere along the prototype chain nor\n<code>Object.prototype</code> has the property. This is called prototype retrieval\ndelegation.</p>\n<p>If properties are added to a prototype, all children of that prototype will\nimmediately be available.</p>\n<p>To determine if an object has a property directly, without invoking the\nprototype chain, use <code>hasOwnProperty</code>.</p>\n<pre><code class=\"language-javascript\">var ob = {};\nob.hasOwnProperty('newProperty');\n> false\neb.newProperty = \"a value\";\nob.hasOwnProperty('newProperty');\n> true\n</code></pre>\n<p>Prototypal inheritance</p>\n<pre><code class=\"language-javascript\">// differential inheritance\nvar Mammal = {\n    name: 'A Mammal',\n    says: 'Noise',\n    get_name: function() {\n        return this.name;\n    },\n    speak: function() {\n        return this.says || '';\n    }\n};\nvar myCat = Object.create(Mammal);\nmyCat.name = 'Henrietta';\nmyCat.says = 'meow';\nmyCat.purr = function(n) {\n    var i,\n        s = '';\n    for(i = 0; i &#x3C; n; i += 1) {\n        if(s) {\n            s += '-';\n        }\n        s += 'r';\n    }\n    return s;\n};\nmyCat.get_name = function() {\n    return this.speak() + ' ' + this.name + ' ' + this.speak();\n};\n</code></pre>\n<p>For-in loops</p>\n<pre><code class=\"language-javascript\">var stooge_2 = Object.create(stooge);\nstooge_2.first_name = 'Harry';\nstooge_2.last_name = 'Moses';\nstooge_2.nickname = 'John';\nfor(var name in stooge_2) {\n    console.log( stooge_2[name] );\n}\n\ndelete stooge_2.nickname;\nconsole.log(stooge_2.nickname); // 'curly'\n\n// Method invocation pattern\nconsole.log('===== Method invocation pattern ====');\nvar myObject = {\n    value: 0,\n    increment: function(inc) {\n        this.value += typeof inc === 'number' ? inc : 1;\n    }\n};\n\nmyObject.increment();\nconsole.log(myObject.value); // 1\nmyObject.increment(2);\nconsole.log(myObject.value); // 3\n</code></pre>\n<h3>Function invocation pattern</h3>\n<pre><code class=\"language-javascript\">myObject.double = function() {\n    var that = this;  // global this mis-assignment fix\n    var helper = function() {\n        that.value = that.value * 2;\n    };\n    helper(); // invoke helper as a function\n};\n// invoke double as a method\nmyObject.double();\nmyObject.value\n> 6\n</code></pre>\n<h3>Constructor Invocation pattern</h3>\n<pre><code class=\"language-javascript\">var Quo = function(string) {\n    this.status = string;\n};\nQuo.prototype.get_status = function() {\n    return this.status;\n};\nvar myQuo = new Quo('confused');\nconsole.log(myQuo.get_status()); // 'confused'\n\n// Apply Invocation pattern\nconsole.log('===== Apply Invocation pattern =====');\nvar statusObject = {\n    status: 'A-OK'\n};\n// invoke the get_status method from Quo on our statusObject\nvar status = Quo.prototype.get_status.apply(statusObject);\nconsole.log(status); // 'A-OK'\n\n// Function Parameters\nconsole.log('===== Function Parameters =====');\nvar sum = function() {\n    var i, sum = 0;\n    for(i = 0; i &#x3C; arguments.length; i += 1) {\n        sum += arguments[i];\n    }\n    return sum;\n};\nconsole.log( sum(4,8,15,16,23,42) ); // 108\n\n// Exceptions\nvar add = function(a, b) {\n    if(typeof a !== 'number' || typeof b !== 'number') {\n       throw { // throw an object with a name and message property\n           name: 'TypeError',\n           message: 'add need numbers'\n       };\n    }\n    debugger;\n    return a + b;\n};\nvar try_it = function() {\n    try {\n        add(\"seven\");\n    } catch(e) {\n        console.log('name: ' + e.name + ' msg: ' + e.message);\n    }\n}\ntry_it();\n</code></pre>\n<p>Object augmentation</p>\n<pre><code class=\"language-javascript\">Function.prototype.method = function(name, func) {\n    // add arbitrary functions with name name to our Object.\n    this.prototype[name] = func;\n    return this;\n};\nNumber.method('integer', function() {\n    return Math[this &#x3C; 0 ? 'ceil' : 'floor'](this);\n});\nconsole.log( (-10/3).integer() ); // -3\n</code></pre>\n<h3>Lexical Scope</h3>\n<p>Lexical scope is the availability of variables to an executing block of code.\nJavaScript lexical scope is determined by resolving objects in the immediate\nlexical scope, then moving up the chain until it reaches the variables defined\nin the global scope.</p>\n<pre><code class=\"language-javascript\">var foo = function() {\n    var a = 3,\n        b = 5;\n    var bar = function() {\n        var b = 7,  // define local b\n            c = 11; // define local c\n        // a = 3, b = 7, c = 11\n        console.log('a', a, 'b', b, 'c', c);\n        a += b + c; // 3 + 7 + 11\n        // a = 21, b = 7, c = 11\n        console.log('a', a, 'b', b, 'c', c);\n    };\n    // now: a = 3, b = 5, c = undefined\n    console.log('a', a, 'b', b);\n    bar();\n    // a = 21, b = 5\n    console.log('a', a, 'b', b);\n};\nfoo();\n> a 3 b 5\n> a 3 b 7 c 11\n> a 21 b 7 c 11\n> a 21 b 5\n</code></pre>\n<h3>Closure</h3>\n<p>A closure is a reference to a function as well as the runtime environment of the\nfunction. This includes any variables within the lexical scope of the function.</p>\n<pre><code class=\"language-javascript\">// addN returns a function that adds its argument.\nvar addN = function(x) {\n    // x and the function below are in the same lexical scope\n    return function(y) {\n        return x + y;\n    }\n}\n\n// add3: Return a function that adds 3 to its argument\nvar add3 = addN(3);\n// add5: Return a function that adds 3 to its argument\nvar add5 = addN(5);\nvar resultOfAdd3 = add3(4); // 7\nvar resultOfAdd5 = add5(4); // 8\nresultOfAdd3\n> 7\nresultOfAdd5\n> 8\n</code></pre>\n<p>Additional examples of closures in JavaScript:</p>\n<pre><code class=\"language-javascript\">var closureObject = (function() {\n    var y = 0; // this variables lifetime is always available to\n               // functions in the same lexical scope.\n    return {\n        increment: function(x) {\n            y += typeof incrementBy === 'number' ?\n                x :\n                1;\n        },\n        getValue: function() {\n            return y;\n        }\n    }\n}());\n// Assign the result of returning a self-executing function to\n// closureObject.\n// The function returns an object with 2 methods, each\n// maintains access to the `y` variable.\nclosureObject.increment(3);\nclosureObject.getValue();\n> 3\n\n// Demonstrates the preservation of the lexical scope of execution.\nvar quo = function(status) {\n    return {\n        get_status: function() {\n            return status;\n        }\n    };\n};\nvar newQuo = quo('amazed!');\n// newQuo still has access to the status parameter even after\n// execution has ended and the lifetime of its lexical scope has ended.\n// This is possible because the function has access to the lexical\n// scope in which it was created. This is called a closure.\nnewQuo.get_status();\n> 'amazed!'\n</code></pre>\n<p>Closure can be useful for things such as callbacks used in animation.</p>\n<pre><code class=\"language-javascript\">var fade = function(node) {\n    var level = 1;\n    var step = function() {\n        var hex = level.toString(16);\n        var colorValue = '#ffff' + hex + hex;\n        node.style.backgroundColor = colorValue;\n        console.log('level ' + level + ' backgroundColor: ' + colorValue);\n        // step() maintains access to 'level' variable outside its execution scope via Closure.\n        if(level &#x3C; 15) {\n            level += 1;\n            setTimeout(step, 100);\n        }\n    };\n    setTimeout(step, 100);\n};\nfade(document.body);\n</code></pre>\n<p>Using closure and setTimout to increment a local variable.</p>\n<pre><code class=\"language-javascript\">for( var i = 0; i &#x3C;= 10; i++ ) {\n  (function(i) {\n    setTimeout(\n        function() { console.log(i) },\n        1000*i);\n  }(i));\n}\n</code></pre>\n<h2>Modules</h2>\n<blockquote>\n<p>A module is a function or object that presents an interface but that hides its\nstate and implementation.<br> > —<cite>Douglas Crockford</cite></p>\n</blockquote>\n<p>Modules exist because developers <em>want</em> to write code in discrete JavaScript\nfiles, while [web] deployment <em>wants</em> optimized code in as few HTTP requests as\npossible. These interests are add odds with one another.</p>\n<p>Modules aim to encapsulate a piece of code into a useful unit, and register its\ncapability/export a value for the module.</p>\n<blockquote>\n<p>The general pattern of a module is a function that defines private variables\nand functions; creates privileged function which, through closure, will have\naccess to the private variables an functions; and that returns the privileged\nfunctions or stores them in an accessible place.<br> > —<cite>Douglas\nCrockford</cite></p>\n</blockquote>\n<p>Douglas then defines a simple module using the function-closure pattern, which\nreturns an anonymous function to a global variable where the module will be\nreferenced.</p>\n<pre><code class=\"language-javascript\">// SayModule: A function that simply console.log's its argument.\nvar SayModule = ( function() {\n    var message = 'You said: {0}';\n    return function(arg) {\n        console.log( message.replace( '{0}', arg ) );\n        return arg;\n    }\n}() );\n\nvar whatSaid = SayModule(\"hello world!\");\n> You said: hello world!\n> 'hello world!'\nwhatSaid\n> 'hello world!'\n</code></pre>\n<p>With many of these, module scripts are strung together in the DOM with\nnamespaces being described by a single global object where it's still possible\nto incur naming collisions in the architecture.</p>\n<p>CommonJS is a set of conventions used to define how JavaScript modules are used\nand packaged. It defines the Module specification. This describes how code can\nfetch and include external modules as a dependency using the <code>require(\"&#x3C;name>\")</code>\nfunction. It also defines how authors export their code either by reassigning a\n<code>module.exports</code> object, or adding properties to an <code>exports</code> variable. CommonJS\nis most often used for synchronous loading of dependencies on server-side\nsystems such as Node.js.</p>\n<p>AMD (Asynchronous Module Definition) is another specification for modules.\nRequireJS is probably the most popular implementation of AMD. RequireJS was\ndesigned to asynchronously load modules in a browser context. RequireJS\nimplements AMD, which is designed to suit the async nature of a browser.\nRequireJS implements a <code>define()</code> function that allows the module to declare its\ndependencies before being loaded. RequireJS can easily be wrapped by CommonJS\nsuch that CommonJS modules can easily be included using RequireJS.</p>\n<p><a href=\"http://browserify.org/\">Browserify</a> is a CommonJS Module implementation that\ncan run in the browser. Browserify introspects JavaScript use of the CommonJS\n<code>require()</code> function and builds a \"bundle\" that can be served in a single HTML\n<code>&#x3C;script></code> tag.</p>\n<p><a href=\"http://webpack.github.io/docs/what-is-webpack.html\">webpack</a> is a module\nbundler that aims to understand the needs of the developer as well as solve the\nproblems of delivering code modules efficiently in the browser. webpack uses an\nopinionated configuration-over-code approach (similar to Grunt, but with more\nopinions) vs Gulp, which requires much more manual wiring.</p>\n<h2>WTF</h2>\n<pre><code class=\"language-javascript\">0.1 + 0.2 // 0.3? NOPE!\n> 0.30000000000000004\n\nx = 1.0000000000000001\nx === 1\ntrue // Huh?\n\ny = {}\n> y[[]] = 1\n> Object.keys(y)\n[ '' ] // HuH?\n</code></pre>\n","slug":"2015-11-15-javascript-the-good-parts"}},"__N_SSG":true}