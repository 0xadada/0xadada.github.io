{"pageProps":{"post":{"slugs":{"year":"2019","month":"03","day":"08","slug":"extending-the-browser-with-the-lingua-franca-of-the-web"},"title":"Extending the browser with the lingua franca of the web","displayTitle":"Extending the browser with the lingua franca of the web","metaDescription":"Understanding WebExtensions; how to create browser extensions  using standard web technologies— JavaScript, HTML, and CSS.","metaKeywords":"webextensions, web extensions, browser extensions, browser plugins, javascript, web development, software development, progressive web apps","image":"/static/images/2019-03-08-components.png","metaImage":"/static/images/2019-03-08-components.png","date":1552044180000,"author":"0xADADA","content":"<p>A browser extension adds features to a web browser. They're created using\nstandard web technologies— JavaScript, HTML, and CSS. Extensions can run\nJavaScript permanently in the background or can run on any page the user visits.\nExtensions can also specify popup windows and options pages.</p>\n<p>All modern browsers increasingly support a standard called the WebExtensions\nAPI. This API provides extensions the additional functionality to add or change\nthe core features of the browser. Extensions developed to follow the\nWebExtensions API will in most cases run in Firefox, Chrome, Opera, Brave, and\nEdge with just a few minor differences.</p>\n<p>An extension will typically be a composition of <em>any or all</em> of the\narchitectural parts of the extensions API:</p>\n<p><img src=\"/static/images/2019-03-08-architecture.png\" alt=\"web extension architecture\"></p>\n<ul>\n<li><strong>background scripts</strong> Are essentially JavaScript running in a hidden tab,\nloaded when the browser starts and run continually. Background scripts are\nwhere extension authors write code that handle global browser events and\nrespond to actions. They maintain long-term state, or can perform long-term\noperations. This code runs independently of any any particular web page or\nbrowser window.</li>\n<li><strong>content scripts</strong> Are JavaScript and CSS loaded into any web page whose URL\nmatches a specified pattern. This code can be written to modify web pages\n(e.g. AdBlockers), or add features to web pages.</li>\n<li><strong>browser actions</strong> A button and icon that the extension adds to the browser's\ntoolbar that can trigger events. These actions <em>may</em> have a <strong>popup</strong>.</li>\n<li><strong>popup</strong> A popup is really just another hidden tab which is shown when the\nextensios toolbar icon is clicked. The content of a popup is specified using\nHTML, CSS, and JavaScript. popup.html (in blue, below) is a basic html page\nthat is loaded into the popup window, but can also be opened in another\nbrowser tab just like any other html page (if you know the extension URL).</li>\n<li><strong>page actions</strong> Similar to browser actions, but these can add menu items to\nthe on-page context menu, and can also open a popup window.</li>\n<li><strong>options pages</strong> An extension can also specify additional pages that are\navailable as popup windows, often offering extension preference panels.</li>\n</ul>\n<p><img src=\"/static/images/2019-03-08-components.png\" alt=\"different parts of an extension\"></p>\n<h2>Creating a simple extension</h2>\n<p>Every extension <em>must, by definition</em> define a <code>manifest.json</code> file, which is\nthe only file that every extension using WebExtension APIs must contain. The\n<code>manifest.json</code> specifies basic metadata about an extension, and also resolves\nhow the code in the extension is loaded, including content scripts, background\nscripts, and browser actions.</p>\n<p>In order to work in all modern browsers, a few fields must be defined in\n<code>manifest.json</code>:</p>\n<ul>\n<li><code>manifest_version</code> defines the WebExtensions API level (2 is the current\nversion)</li>\n<li><code>name</code> the extension name</li>\n<li><code>version</code> version of the addon</li>\n<li><code>author</code> name of the person or organization (required by Edge) who wrote the\nextension</li>\n</ul>\n<p>A few other key fields are optional but highly recommended:</p>\n<ul>\n<li><code>description</code> text displayed in the Extension UI and in the extensions app\nstores</li>\n<li><code>icons</code> will be shown in the browser toolbar, in the Extension manager UI, and\nthe various extensions app stores\n<ul>\n<li>a 32px icon will be shown in the toolbar (resized)</li>\n<li>a 48px icon will be shown in the Firefox Add-ons Manager and Chrome\nExtensions Management</li>\n<li>a 96px icon will be shown in the Firefox Add-ons Manager (on high DPI\ndevices with a Retina display)</li>\n<li>a 128px icon will be shown in the Chrome Web Store</li>\n</ul>\n</li>\n</ul>\n<p>To deliver the best visual experience to users with high-resolution displays,\nthe browser will attempt to find the best matching resolution icon. It is best\npractice to provide a set of icons in multiple resolutions.</p>\n<p>This <code>manifest.json</code> defines a minimal browser extension that provides an icon\nbut doesn't do anything, but <em>hey</em>, its something:</p>\n<pre><code class=\"language-json\">{\n  \"manifest_version\": 2,\n\n  \"version\": \"1.0\",\n\n  \"name\": \"My extension\",\n  \"author\": \"me\",\n\n  \"description\": \"My first extension\",\n\n  \"icons\": {\n    \"16\": \"icon-16.png\",\n    \"32\": \"icon-32.png\",\n    \"48\": \"icon-48.png\",\n    \"96\": \"icon-96.png\"\n  }\n}\n</code></pre>\n<p>Mozilla maintains a\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_compatibility_for_manifest.json\">WebExtensions browser compatibility table</a>\nwhich is helpful for getting the <code>manifest.json</code> working across all major\nbrowsers.</p>\n<h2>Extension Runtime Contexts</h2>\n<p>Access to the complete WebExtensions API is not universally accessible from\nJavaScript. There are different levels of access depending on the context in\nwhich the code is running. There are essentially two contexts: The background\ncontext which has access to the complete WebExtensions API, but cannot access\nany web page DOM; and the content script context, which has access to the any\nweb page DOM API, but doesn't have complete access to the WebExtensions API. The\ntwo contexts work together with a message passing API that allows them to\naccomplish tasks together.</p>\n<p><strong>Background scripts</strong> run in the context of a special hidden tab called a\nbackground page. This gives them a <code>window</code> global containing parts of the\nstandard DOM API. Background scripts can access <em>all of the WebExtension APIs</em>\n(as long as the <code>manifest.json</code> has opted the extension into the necessary\npermissions). Background scripts cannot access the DOM of any web page.</p>\n<p>Background scripts <em>can</em> make XHR requests to any hosts (as long as the\n<code>manifest.json</code> have granted host permissions). Background scripts do not get\ndirect access to web pages, however, they can load content scripts into web\npages and then can communicate with these content scripts using the\n<code>browser.runtime.sendMessage</code> API. The content scripts can then access the web\npage DOM on behalf of the background script.</p>\n<p><strong>Content scripts</strong> are extension-provided scripts which run in the context of a\nweb page. These scripts can see and manipulate the page DOM, just like normal\nscripts loaded by the page. Unlike normal page scripts, they can also make\ncross-domain XHR requests (when granted permission). Content scripts have access\nto a more restricted\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts#WebExtension_APIs\">subset of the overall WebExtensions API</a>.\nFor example, the <code>browser.cookies</code> API is not available to content scripts.\nContent scripts can exchange messages with their background scripts, and in this\nway indirectly access all the WebExtension APIs.</p>\n<p>Web extension code communicates across contexts using either the standard DOM\nAPI <code>window.postMessage(...)</code>: for communicate between content scripts and other\nscripts on the host page, or the content scripts and other page scripts can\ncommunicate with the background script using the\n<code>browser.runtime.sendMessage(...)</code> API. The background script can additionally\nsend messages to the content script using <code>browser.tabs.sendMessage(...)</code>.</p>\n<p><img src=\"/static/images/2019-03-08-communication.png\" alt=\"extension message communication\"></p>\n<h2>Deploying an extension</h2>\n<p>Extensions are compressed into a zip file before being uploaded to the extension\napp store. Mozilla maintains a build tool for creating a zipped package that'll\nwork on both the Chrome Web Store and the Firefox Addons store. This tool can\nalso perform project linting, as well as testing and a development runner that\nhot-reloads extension code for Firefox.</p>\n<ul>\n<li><a href=\"https://github.com/mozilla/web-ext/\">web-ext</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Getting_started_with_web-ext\">Documentation</a></li>\n</ul>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://developer.chrome.com/extensions\">Google WebExtensions API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions\">Mozilla WebExtensions API</a></li>\n<li><a href=\"https://github.com/brave/browser-laptop/wiki/Developer-Notes-on-Installing-or-Updating-Extensions\">Brave</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/extensions/\">Microsoft</a></li>\n</ul>\n","slug":"2019-03-08-extending-the-browser-with-the-lingua-franca-of-the-web","license":"cc-by-nc-sa"}},"__N_SSG":true}