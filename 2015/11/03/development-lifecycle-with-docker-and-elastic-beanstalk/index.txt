3:I[5613,[],""]
8:I[1778,[],""]
9:I[5250,["250","static/chunks/250-d7e0a94ebe194dac.js","931","static/chunks/app/page-f7ba098afe402509.js"],""]
a:I[1749,["250","static/chunks/250-d7e0a94ebe194dac.js","749","static/chunks/749-1aefd436964833c3.js","185","static/chunks/app/layout-47388580e711ac48.js"],"Image"]
4:["year","2015","d"]
5:["month","11","d"]
6:["date","03","d"]
7:["slug","development-lifecycle-with-docker-and-elastic-beanstalk","d"]
0:["_wneoiC2fI415-KfmzbkB",[[["",{"children":[["year","2015","d"],{"children":[["month","11","d"],{"children":[["date","03","d"],{"children":[["slug","development-lifecycle-with-docker-and-elastic-beanstalk","d"],{"children":["__PAGE__?{\"year\":\"2015\",\"month\":\"11\",\"date\":\"03\",\"slug\":\"development-lifecycle-with-docker-and-elastic-beanstalk\"}",{}]}]}]}]}]},"$undefined","$undefined",true],["",{"children":[["year","2015","d"],{"children":[["month","11","d"],{"children":[["date","03","d"],{"children":[["slug","development-lifecycle-with-docker-and-elastic-beanstalk","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","$5","children","$6","children","$7","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/183d1ed06b79b750.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","$5","children","$6","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","$5","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en-US","children":["$","body",null,{"children":[["$","main",null,{"className":"layout_layout__dCqca","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"footer_footer__woFMY layout_layout__dCqca","children":["$","nav",null,{"children":["$","p",null,{"children":["© 2003-","2024"," 0xADADA (unless otherwise noted.)",["$","br",null,{}],["$","$L9",null,{"href":"/","title":"0xADADA","children":"Home"}]," ",["$","span",null,{"className":"h-card","children":[["$","$L9",null,{"href":"mailto:0xadada.pub@protonmail.com","className":"c-Meta u-email","rel":"me","title":"0xADADA","children":"Email"}]," "]}],["$","$L9",null,{"href":"https://warpcast.com/0xadada","rel":"me nofollow external noopener","title":"0xADADA on Warpcast","children":"Farcaster"}]," ",["$","$L9",null,{"href":"https://mastodon.cloud/@0xADADA","rel":"me nofollow external noopener","title":"0xADADA on Mastodon","children":"Mastodon"}]," ",["$","$L9",null,{"href":"https://bsky.app/profile/0xadada.bsky.social","rel":"me nofollow external noopener","title":"0xADADA on Bluesky","children":"Bluesky"}]," ",["$","$L9",null,{"href":"https://twitter.com/0xadada","rel":"me nofollow external noopener","title":"0xADADA on Twitter","children":"Twitter"}]," ",["$","$L9",null,{"href":"https://github.com/0xadada","rel":"me nofollow external noopener","title":"0xADADA on GitHub","children":"GitHub"}]," ",["$","$L9",null,{"href":"https://www.goodreads.com/review/list/60524683-0xadada?shelf=wanted","rel":"me nofollow external noopener","title":"0xADADA on Goodreads","children":"Goodreads"}]," ",["$","$L9",null,{"href":"/rss.xml","children":"RSS"}]," ",["$","$La",null,{"src":"/static/images/meta/avatar.svg","alt":"0xADADA icon","width":"20","height":"20","style":{"marginBottom":"-0.125rem"}}]]}]}]}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/0f904eceedda47c6.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:T6ac,.dockerignore
.ebextensions/
  01_envvars.config
.ebignore
.elasticbeanstalk/
Dockerrun.aws.json
.gitignore               # Describes which files git ignores
.bowerrc                 # Configures where web frontend dependencies live
.csslintrc.json          # Describes CSS syntax rules
.jshintrc                # Describes JavaScript syntax rules
bower.json               # Describes web frontend dependencies
gulpfile.js              # Describes app build and dev tasks
package.json             # Describes NPM dependencies
app/                     # Our python app
  apps/*                 # python app modules
  project/*              # App-specific settings
  dist/*                 # App static assets (served via Nginx)
bin/*
docker/
  django/
    dev/
      docker-compose.yml
      Dockerfile
    prod/
      docker-compose.yml
      Dockerfile
      gunicorn.conf.py   # Settings for production app-server
    start.sh             # Script to start app-server
  nginx/*                # Nginx config files
environments/            # Environment-specific settings
  dev/                   # Development-only environment settings
    .env                 # Actual environment vars (Excluded from git)
    .env.example         # Example environment vars
    Procfile             # Configures how Honcho starts app-servers
    requirements.txt     # Describes dev Python dependencies
  prod/                  # Development-only environment settings
    .env                 # Actual environment vars (Excluded from git)
    .env.example         # Example environment vars
    Procfile             # Configures how Honcho starts app-servers
    requirements.txt     # Describes prod Python dependencies
2:["$","article",null,{"className":"hentry h-entry","children":[["$","header",null,{"children":[["$","h1",null,{"className":"entry-title p-name","children":"Development Lifecycle with Docker and Elastic Beanstalk"}],["$","time",null,{"className":"display-date_published__A_L_d dt-published","dateTime":"2015-11-03T00:00:00.000Z","children":"Tuesday November 3, 2015"}],["$","span",null,{"className":"h-card page_byline___vuXv","children":[" by ",["$","span",null,{"className":"fn p-author p-name","children":"0xADADA"}]]}]]}],["$","div",null,{"className":"entry-content e-content","children":[["$","p",null,{"children":"Docker is getting a lot of hype these days, for good reason. There are plenty of\narticles touting the merits of Docker but most are written without context and\nare limited to examining the the benefits of Docker independently of its’\npractical everyday use in a software development project lifecycle."}],"\n",["$","p",null,{"children":"This article aims to examine the benefits of Docker within the context of a\nsoftware company with multiple developers working on multiple projects, having\nto manage these projects deployed in a cloud production environment. In this\ncontext the benefits of Docker become more readily apparent."}],"\n",["$","p",null,{"children":["With the rise of cloud computing, the number of systems that need to be\nmaintained has exploded. Manual ",["$","em",null,{"children":["$","a",null,{"href":"#provisioning","children":"provisioning"}]}]," of an\nincreasingly large number of systems becomes impossible for a small team, given\nplatforms like Amazon EC2 provide ",["$","em",null,{"children":["$","a",null,{"href":"#autoscaling","children":"auto-scaling"}]}]," when additional\nload is detected."]}],"\n",["$","p",null,{"children":["Tools like Ansible, Chef, Puppet and Salt are great solutions towards achieving\nautomated provisioning of virtual machines. The industry has responded by\nquickly adopting these tools, but even more agility and performance can be\nachieved by using ",["$","em",null,{"children":["$","a",null,{"href":"#docker-container","children":"Docker containers"}]}],"."]}],"\n",["$","p",null,{"children":"Combining Docker with a deployment tool like AWS Elastic Beanstalk can provide\neven greater efficiencies for developing and deploying cloud applications."}],"\n",["$","h2",null,{"children":"Dockdj"}],"\n",["$","figure",null,{"className":"rehype-figure","children":[["$","img",null,{"src":"https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a2.png","alt":"Dockdj"}],["$","figcaption",null,{"children":"Dockdj"}]]}],"\n",["$","p",null,{"children":["This article will be using ",["$","a",null,{"href":"https://github.com/0xadada/dockdj","children":"Dockdj"}]," to\nillustrate using Docker and Elastic Beanstalk in the context of a real-world web\nproject. Dockdj is a recipe for building 12-factor Python / Django web apps with\nmulti-container Docker and deploying to Amazon AWS using Elastic Beanstalk.\n",["$","a",null,{"href":"https://github.com/0xadada/dockdj","children":"Dockdj is available on GitHub"}],"."]}],"\n",["$","h3",null,{"children":"Manual Provisioning"}],"\n",["$","p",null,{"children":["The naive approach is ",["$","em",null,{"children":"manual provisioning"}],": the developer installs Apache and\nassociated system libraries directly on the local development machine, configure\nit according to the WordPress documentation."]}],"\n",["$","p",null,{"children":["These manual steps will need to be repeated for every additional member of the\ndevelopment team, and again for the production web server. When provisioned\nsoftware is updated or configurations change. All members of the development\nteam and the production systems need to be updated accordingly. Larger teams\ninevitably begin experiencing the ",["$","em",null,{"children":"“works on my machine”"}]," problems between\ndevelopers when some developers haven’t updated their configurations to match\ncoworkers who have."]}],"\n",["$","p",null,{"children":"Manual provisioning quickly becomes a frequent and resource-intensive process,\nwith the side-effect of prolonging the deployment of important vendor bug fixes\nand security patches across both development and productions systems."}],"\n",["$","p",null,{"children":"Additionally, when increased traffic hits productions systems, new systems need\nto be allocated and scaled horizontally to support the new traffic. All the\nprovisioning needs to repeated. This system doesn’t scale as more production\nservers are added to serve additional traffic load."}],"\n",["$","p",null,{"children":"Even worse is when differences between developer-systems and production-systems\nresult in hard-to-reproduce bugs once the app is deployed from development into\nproduction."}],"\n",["$","h3",null,{"children":"Automated Provisioning"}],"\n",["$","p",null,{"children":["An improvement over manual provisioning is ",["$","em",null,{"children":"automated provisioning"}]," using a\n",["$","em",null,{"children":["$","a",null,{"href":"#confg-mgmt","children":"configuration management"}]}]," tool like Ansible, Chef, Puppet, Salt,\netc. These tools have been developed to address the problems of provisioning at\nlarge scale."]}],"\n",["$","p",null,{"children":"The aim of these tools are:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Initialize and start virtual machines"}],"\n",["$","li",null,{"children":"Automate the provisioning process in a repeatable way"}],"\n",["$","li",null,{"children":"Manage changes to provisioning in a version control system"}],"\n",["$","li",null,{"children":"Establishing and maintaining consistency of system dependencies and\nconfiguration throughout an applications life"}],"\n"]}],"\n",["$","p",null,{"children":["Configuration management tools are wonderful for automated provisioning, but ",["$","em",null,{"children":"in\npractice"}],["$","sup",null,{"children":["$","a",null,{"href":"#user-content-fn-1","id":"user-content-fnref-1","data-footnote-ref":true,"aria-describedby":"footnote-label","children":"1"}]}]," they tend to\nsplit management of the stack-app into two parts:"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"the software Stack"}],"\n"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Operating system"}],"\n",["$","li",null,{"children":"System libraries"}],"\n",["$","li",null,{"children":"Provisioned software"}],"\n",["$","li",null,{"children":"Configuration"}],"\n"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"the Application"}],"\n"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Source code & binaries"}],"\n",["$","li",null,{"children":"Dependencies"}],"\n",["$","li",null,{"children":"Runtime environment"}],"\n"]}],"\n",["$","p",null,{"children":["The result is that the stack (#1) is initially allocated and provisioned using\none of the configuration management tools. The application (#2) is then deployed\non the stack— resulting in a running application. When subsequent\napplication versions (#2) are released and deployed, they are deployed onto the\n(unchanged) stack. ",["$","strong",null,{"children":"The problem with this model is that the stack and the\napplication are managed independently."}]," Changes to the stack are managed as a\nunit separate from changes to the application. No data is recorded that\ndescribes the compatibility of the integrated whole."]}],"\n",["$","p",null,{"children":["This results in increased complexity during rollbacks or simultaneous updates to\nboth stack and application. More importantly ",["$","strong",null,{"children":"version numbers of the\napplication are not tied to versions of the stack."}]]}],"\n",["$","p",null,{"children":"Under this model, the stack version and application version aren’t\ncoupled— which increases the likelihood of integration failures."}],"\n",["$","p",null,{"children":"An example will illustrate where this model will fail:"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Our production web server is provisioned with Apache 3.3.0 and the application\n(WordPress) was at version 0.7.0 last week, and have just released version\n0.8.0 this past week."}],"\n",["$","p",null,{"children":"Apache announces a security vulnerability fix at version 3.3.1. Under the\n(typical) automated provisioning model, the configuration management tool\nwould be updated to provision the new version of Apache. The tool runs against\nall production server systems. Here the application doesn’t change, it simply\nrides on top of the Apache stack without change. No problems occur with the\nrollout of the new Apache release."}],"\n",["$","p",null,{"children":"Next the application updates and releases a new version for deployment- 0.9.0.\nThe deploy process runs, and for some reason the application fails, it isn’t\ncompatible with version 3.3.1 of Apache."}],"\n",["$","p",null,{"children":"The decision is made to rollback the application to 0.8.0, which runs\nsuccessfully with Apache 3.3.1. The system is working again."}],"\n",["$","p",null,{"children":"A critical security vulnerability is discovered in application 0.8.0 and the\ndecision is made to roll application back to version 0.7.0. (Keep in mind the\nprevious app version 0.7.0 was running Apache 3.3.0, and the stack is\ncurrently 3.3.1)."}],"\n",["$","p",null,{"children":"The application fails— because 0.7.0 was never integration tested\nagainst Apache 3.3.1. What do you do?"}],"\n"]}],"\n",["$","p",null,{"children":["In this example the devops team ",["$","strong",null,{"children":"failed to remember"}]," to rollback Apache,\nsimply because the integrated dependencies were not internally coupled. The\ncompatible coupling existed ",["$","strong",null,{"children":"only as institutional knowledge"}]," outside the\nscope of the configuration management system, as Stack and Application were\nmanaged separately."]}],"\n",["$","h2",null,{"children":"Docker for Configuration Management"}],"\n",["$","p",null,{"children":["One major advantage of Docker is that it does not necessitate running a unique\nVM",["$","sup",null,{"children":["$","a",null,{"href":"#user-content-fn-2","id":"user-content-fnref-2","data-footnote-ref":true,"aria-describedby":"footnote-label","children":"2"}]}]," for every project a team works on.\nIf developers work on multiple projects, each with its own customized VM,\nswitching between projects becomes a time-consuming context shift for\ndevelopers."]}],"\n",["$","p",null,{"children":["Docker containers run directly on the Linux operating system and yet each\ncontainer is isolated. This eliminates the slowness of booting and the overhead\nof a VM. Docker containers start up as quickly as running a normal process, and\neliminate VM “booting” for every Docker project the developer works on.\nDeploying changes to the environment for every developer working on the project\nis as easy as publishing a new ",["$","em",null,{"children":["$","a",null,{"href":"#docker-image","children":"Docker image"}]}],". Next time a\ndeveloper starts the container, he/she will get the new image."]}],"\n",["$","p",null,{"children":["Another advantage of Docker over an automated configuration management tool is\nthat it ",["$","strong",null,{"children":"does not"}]," bifurcate the stack and the application into independent\nsegments."]}],"\n",["$","p",null,{"children":"A stack using Docker containers has the same benefit of configuration\nmanagement, but can couple the stack and the application into a single managed\ncomponent. The application is deployed along with its stack— and the\ncomplete stack-app component is deployed together as a single Docker image or a\nbundle of Docker images that have already been integration tested at least on a\ndevelopers machine."}],"\n",["$","p",null,{"children":"As opposed the the “automated provisioning” model, the Docker model of the\nstack-app looks more like this:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Set of Docker images"}],"\n"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Operating system (the software Stack)"}],"\n",["$","li",null,{"children":"Provisioned software (the software Stack)"}],"\n",["$","li",null,{"children":"Configuration (the software Stack)"}],"\n",["$","li",null,{"children":"System libraries (the software Stack)"}],"\n",["$","li",null,{"children":"Source code & binaries (Application)"}],"\n",["$","li",null,{"children":"Dependencies (Application)"}],"\n",["$","li",null,{"children":"Runtime environment (Application)"}],"\n"]}],"\n",["$","p",null,{"children":"With every deployment, the entire stack-app (1) will be deployed. Docker uses\nhashes (like Git) to minimize the amount of data that will be downloaded for any\nupdate. This means only the differences are downloaded rather than the entire\nstack."}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"The greatest advantage of using Docker is that developers can run the\napplication in the very same environment as production"}],". According to\n",["$","a",null,{"href":"http://12factor.net/dev-prod-parity","children":"Twelve-Factor Methodology"}]," this is called\nachieving “Dev/Prod Parity”. This is a huge benefit in that it eliminates an\nentire class of bugs that result from differences between\ndevelopers-and-developers as well as bugs that result from differences between\ndevelopers-and-production."]}],"\n",["$","h2",null,{"children":"Elastic Beanstalk for Deployment"}],"\n",["$","p",null,{"children":["If you know ",["$","a",null,{"href":"https://www.heroku.com/","children":"Heroku"}],", than Amazons’ Elastic Beanstalk\nwill be extremely familiar. EB borrows many ideas from Heroku, but the killer\nfeature is its’ ability to dynamically run, deploy and scale Docker containers\non a cluster of servers. It handles hardware allocation, network configuration,\nload balancing, auto-scaling, health monitoring and rolling deployments."]}],"\n",["$","p",null,{"children":"EB doesn’t do everything, but it’s good enough to adopt early and use until your\nteam understands its deployment use-cases more clearly and understands\nlimitations of EB and its trade-offs."}],"\n",["$","h2",null,{"children":"Django specific structure"}],"\n",["$","p",null,{"children":"The core structure of the Docker / Elastic Beanstalk app can be explained by\ndescribing the directory structure."}],"\n",["$","p",null,{"children":"These comments describe the application-specific file structure:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"$c"}]}],"\n",["$","p",null,{"children":"Some of these directories and files are described in more depth below:"}],"\n",["$","h3",null,{"children":".gitignore"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"environments/*/.env\nnode_modules\n.elasticbeanstalk/*\n!.elasticbeanstalk/*.cfg.yml\n!.elasticbeanstalk/*.global.yml\n# Built testing and static asset artifacts\napp/dist\n"}]}],"\n",["$","p",null,{"children":["Files matching the name ",["$","code",null,{"children":"environments/*/.env"}]," contain sensitive information\n(usernames, passwords, etc) about per-deployment environments that shouldn’t be\nincluded in version control."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"node_modules"}]," directory and will be created when the developer installs NPM\npackages. These are dependencies and should not be committed into the source\ncode repository."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":".elasticbeanstalk/*"}]," directory is excluded from Git because it contains\nfiles that are generated by EB command-line during environment creation and\nversion deployment that shouldn’t be written to the repository. It also contains\ntemporary configuration files (written by the EB cli)."]}],"\n",["$","p",null,{"children":["Both ",["$","code",null,{"children":"!.elasticbeanstalk/*.cfg.yml"}]," and ",["$","code",null,{"children":"!.elasticbeanstalk/*.global.yml"}],"\nentries use the “NOT” operator to re- include themselves into the repo. These\nfiles can be useful to have in version control, as they contain useful\nenvironment configuration settings."]}],"\n",["$","h3",null,{"children":"bower.json"}],"\n",["$","p",null,{"children":"Bower is a web frontend package management system. The application declares its\nfrontend dependencies in this file."}],"\n",["$","p",null,{"children":"During docker image creation, these dependencies are installed."}],"\n",["$","h3",null,{"children":"gulpfile.js"}],"\n",["$","p",null,{"children":["Gulp.js is a task runner for Node.js. ",["$","code",null,{"children":"gulpfile.js"}]," defines common tasks and\nutilities related to this application:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Running code Syntax checking & automated testing"}],"\n",["$","li",null,{"children":"SASS and CSS compilation and minification"}],"\n",["$","li",null,{"children":"Frontend asset building"}],"\n"]}],"\n",["$","h3",null,{"children":"package.json"}],"\n",["$","p",null,{"children":["NPM is a package management system for Node.js applications. ",["$","code",null,{"children":"package.json"}]," The\napplication declares its Node.js dependencies in this file."]}],"\n",["$","h3",null,{"children":"app/"}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"app/"}]," directory contains all source code related to the Django python web\napplication."]}],"\n",["$","h3",null,{"children":"docker/django/prod/gunicorn.conf.py"}],"\n",["$","p",null,{"children":["This project uses two application servers, ",["$","code",null,{"children":"runserver_plus"}]," during development\nand ",["$","code",null,{"children":"gunicorn"}]," in production."]}],"\n",["$","p",null,{"children":"These are settings related to the Gunicorn application server. In production, a\nmore performant application is used, requiring this configuration file."}],"\n",["$","h3",null,{"children":"docker/nginx/sites-enabled.conf"}],"\n",["$","p",null,{"children":["On production systems, where nginx acts as a reverse-proxy for the Gunicorn web\napplication, we use Docker links to connect the two containers together. This\nconfiguration is best for reducing latency. Inside our nginx config file, we can\nuse a named entry for the ",["$","code",null,{"children":"proxy_pass"}]," value to reference our Django application\nserver running in another container on port 8080."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"# ...\nlocation / {\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header Host $http_host;\n  proxy_redirect   off;\n  proxy_pass       http://django:8080;\n  # ...\n"}]}],"\n",["$","h3",null,{"children":"docker/django/start.sh"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"cd /var/app\n# ...\nhoncho --procfile \"environments/$ENV_NAME/Procfile\" \\\n       --env \"environments/$ENV_NAME/.env\" start\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"start.sh"}]," is used during both development and production as a single task to\nbootstrap the application server. It uses the ",["$","code",null,{"children":"honcho"}]," task runner to start the\nserver according to a set of tasks in a ",["$","code",null,{"children":"Procfile"}]," for development and another\nfor production."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"--env"}]," parameter is used to pass environment variables sourced from the\nenvironments subdirectory. At runtime, the ",["$","code",null,{"children":"$$ENV_NAME"}]," variable will be set:\n",["$","code",null,{"children":"dev"}]," for development and ",["$","code",null,{"children":"prod"}]," for production. This way a separate Procfile\nand separate set of environment variables are available to configure the modes\nindependently."]}],"\n",["$","h3",null,{"children":"environments/dev/Procfile"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"# The webserver: Python\nwebserver: cd app && ./manage.py runserver_plus 0.0.0.0:8080\n# The CDN assets emulation server\ncdnserver: cd /var/app/app/dist && python -m http.server 8010\n"}]}],"\n",["$","p",null,{"children":["During development, the Django ",["$","code",null,{"children":"runserver_plus"}]," application server interprets\nPython, while a simple HTTP server serves assets (images, CSS, etc)."]}],"\n",["$","h3",null,{"children":"environments/prod/Procfile"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"webserver: cd app && gunicorn \\\n  -c /etc/gunicorn/gunicorn.conf.py project.wsgi:application\n"}]}],"\n",["$","p",null,{"children":"In production, we use Gunicorn to serve the python application, so the only task\nrun is the gunicorn app server. Static assets aren’t handled here because Nginx\nwill be reverse-proxying the application and also serving static assets."}],"\n",["$","p",null,{"children":"This decision was made because Nginx is optimized to serve static assets and it\nwill reduce load on the application server."}],"\n",["$","h3",null,{"children":"environments/[dev | prod]/.env.example"}],"\n",["$","p",null,{"children":["Both ",["$","code",null,{"children":"environments/dev/.env.example"}]," and ",["$","code",null,{"children":"environments/prod/.env.example"}]," are\ncommitted into git to provide hints to developers that they should create a\n",["$","code",null,{"children":".env"}]," file in the same directory as a place to store environment variables that\nare passed into the application."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":".env"}]," file is excluded from the git repository as it contains sensitive\nusernames passwords and cryptographic information."]}],"\n",["$","h3",null,{"children":"environments/[dev | prod]/requirements.txt"}],"\n",["$","p",null,{"children":["The python utility ",["$","code",null,{"children":"pip"}]," is a package management utility. It uses a file named\n",["$","code",null,{"children":"requirements.txt"}]," to install all package dependencies. The development\nenvironment adds some useful debugging utilities that shouldn’t be included on\nproduction systems, so production has its own file."]}],"\n",["$","p",null,{"children":"During docker image creation, these dependencies are installed."}],"\n",["$","h2",null,{"children":"Docker specific structure"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":".dockerignore            # Describes which files Docker ignores\n.ebextensions/\n  01_envvars.config\n.ebignore\n.elasticbeanstalk/\nDockerrun.aws.json\n.gitignore\n.bowerrc\n.csslintrc.json\n.jshintrc\nbower.json\ngulpfile.js\npackage.json\napp/\n  apps/*\n  project/*\n  dist/*\nbin/*                    # Scripts for Docker, build and deployment\ndocker/                  # Configuration files required by docker\n  django/                # Django related settings\n    dev/                 # Development-only settings\n      docker-compose.yml # Orchestrates dev containers\n      Dockerfile         # Builds dev Docker image\n    prod/                # Production-only settings\n      docker-compose.yml # Orchestrates prod containers\n      Dockerfile         # Builds prod Docker image\n      gunicorn.conf.py\n    start.sh\n  nginx/*\nenvironments/\n  dev/\n    .env\n    .env.example\n    Procfile\n    requirements.txt\n  prod/\n    .env\n    .env.example\n    Procfile\n    requirements.txt\n"}]}],"\n",["$","h3",null,{"children":".dockerignore"}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":".dockerignore"}]," file specifies a list of patterns to exclude from the build\ncontext during creation of the Docker image. These files are not required by the\nexecution of the container, and should be removed to reduce the size of the\nfinal image."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":".coverage\n.ebextensions/*\n.elasticbeanstalk/*\n.ebignore\n.dockerignore\n.git\n.gitignore\n.DS_Store\nnode_modules\napp/dist\ndocs\nhtmlcov\nREADME.md\nghostdriver.log\n"}]}],"\n",["$","p",null,{"children":"Some notable entries are described below:"}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"node_modules"}]," directory and will be created when the developer installs NPM\npackages. If the developer is using on OS X, packages compiled on OS X will not\nwork when the container is running in the Linux VM, so this entry ensures that\nnode modules are installed on the host OS independently from the container OS."]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":".ebextensions/*"}],", ",["$","code",null,{"children":".elasticbeanstalk/*"}]," and ",["$","code",null,{"children":".ebignore"}]," are required by the\nElastic Beanstalk deploy process, and are outside the scope of execution of the\nDocker container, and are not required."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"app/dist"}]," directory contains frontend assets served by both Django and\nNginx, and are required by both Django and Nginx containers. Because Amazon ECS\ncannot (currently) directly mount a single volume from one container into\nanother container, we need these files to be deployed directly on the host OS.\nDocker can mount the directory on both Django and Nginx containers as a shared\nvolume. This directory will be deployed by EB, and is thus excluded from Docker."]}],"\n",["$","h3",null,{"children":"bin/image"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"bin/image"}]," is a shell script that wraps common Docker commands used to create\nDocker images. There are three major subcommands: ",["$","code",null,{"children":"build"}],", ",["$","code",null,{"children":"destroy"}]," and\n",["$","code",null,{"children":"update"}]," all take a single argument, the name of the environment subdirectory of\nthe ",["$","code",null,{"children":"environments/"}]," directory. This will spawn Docker and build, delete or\nrebuild the image as specified by the ",["$","code",null,{"children":"Dockerfile"}]," in the directory\ncorresponding to the final argument."]}],"\n",["$","h3",null,{"children":"bin/stevedore"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"bin/stevedore"}]," is a shell script that wraps common Docker commands used to\nstart and stop Docker containers. There are many subcommands, but the most\nuseful are: ",["$","code",null,{"children":"start"}],", ",["$","code",null,{"children":"stop"}]," and either of the two ",["$","code",null,{"children":"build"}]," commands. All\nsubcommands take take a single argument, the name of the environment\nsubdirectory of the ",["$","code",null,{"children":"environments/"}]," directory. This will spawn Docker and start,\nstop or run the corresponding build process."]}],"\n",["$","h3",null,{"children":"docker/django/dev/docker-compose.yml"}],"\n",["$","p",null,{"children":"This file provides configuration for Docker to orchestrate the management of the\ndevelopment Docker container for the local dev environment."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"django:\n  build: ../../..\n  dockerfile: docker/django/dev/Dockerfile\n  env_file: ../../../environments/dev/.env\n  volumes:\n    - \"../../../app/apps:/var/app/app/apps\"\n    - \"../../../app/dist:/var/app/app/dist\"\n    - \"../../../app/project:/var/app/app/project\"\n    - \"../../../app/manage.py:/var/app/app/manage.py\"\n    - \"../../../environments:/var/app/environments\"\n    - \"../../../gulpfile.js:/var/app/gulpfile.js\"\n  ports:\n    - \"80:8080\"\n    - \"8010:8010\"\n"}]}],"\n",["$","p",null,{"children":["It defines one container “django”, specifying a path to the ",["$","code",null,{"children":"build"}],"-context as\nwell as a path to load the ",["$","code",null,{"children":"Dockerfile"}],". ",["$","code",null,{"children":"env_file"}]," specifies the path the a\nfile containing all environment variables. A set of volumes to share from the\nhost OS to the container are listed in ",["$","code",null,{"children":"volumes"}],". Finally ",["$","code",null,{"children":"ports"}]," tells Docker\nwhich ports on the host to map to the container."]}],"\n",["$","h3",null,{"children":"docker/django/dev/Dockerfile"}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"Dockerfile"}]," is a set of instructions for Docker to execute in order to\nproduce a Docker image— a file used to create a Docker container running\nyour application code."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"# ...\n# Install apt, Python then NodeJS dependencies.\nRUN             apt-get update && \\\n                curl -sL https://deb.nodesource.com/setup_0.12 | bash - && \\\n                apt-get install -y nodejs && \\\n                pip install --upgrade pip && \\\n                pip install -r \\\n                    environments/dev/requirements.txt && \\\n                npm update && \\\n                npm install -g gulp && \\\n                npm install && \\\n                gulp\n# Add our initialization script to the image and run it upon startup.\nADD             docker/django/start.sh /\nCMD             [\"/start.sh\"]\n"}]}],"\n",["$","p",null,{"children":["In the development Dockerfile, ",["$","code",null,{"children":"pip"}]," and ",["$","code",null,{"children":"npm"}]," commands install the necessary\ndependencies from the ",["$","code",null,{"children":"environments/dev"}]," folder. Finally ",["$","code",null,{"children":"start.sh"}]," is called to\nstart the Django application server."]}],"\n",["$","h3",null,{"children":"docker/django/prod/docker-compose.yml"}],"\n",["$","p",null,{"children":"This file provides configuration for Docker to orchestrate the management of the\nproduction Docker containers. This configuration can be used for testing locally\nprior to deployment to Amazon AWS."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yml","children":"django:\n  build: ../../..\n  dockerfile: docker/django/prod/Dockerfile\n  env_file: ../../../environments/prod/.env\n  volumes:\n    - \"../../../docker/django/prod/gunicorn.conf.py:/etc/gunicorn/gunicorn.conf.py:ro\"\n    - \"/var/app/app/dist\"\n\nnginx:\n  image: nginx\n  links:\n    - django\n  volumes:\n    - \"../../../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\"\n    - \"../../../docker/nginx/sites-enabled.conf:/etc/nginx/conf.d/default.conf:ro\"\n  volumes_from:\n    - django\n  ports:\n    - \"80:80\"\n"}]}],"\n",["$","p",null,{"children":"It defines two containers “django” and “nginx”. “Django” is configured quite\nsimilar to the development setup, but doesn’t map as many volumes from the host\nOS to the container. In this configuration “django” doesn’t need to expose a\nport externally, as the “nginx” container will expose port 80 externally."}],"\n",["$","p",null,{"children":["Importantly, the “nginx” container uses ",["$","code",null,{"children":"links"}]," to connect the “django”\ncontainer to “nginx”. This way nginx config files can refer to “django” as-if it\nwas another host on the same network with the name “nginx”."]}],"\n",["$","p",null,{"children":["Finally, the “nginx” container will mount all volumes from the “django”\ncontainer with the ",["$","code",null,{"children":"volumes_from"}]," directive, and expose port 80 to the host OS."]}],"\n",["$","h3",null,{"children":"docker/django/prod/Dockerfile"}],"\n",["$","p",null,{"children":["The major difference between the development ",["$","code",null,{"children":"Dockerfile"}]," and the production\nversion is:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"It exposes port 8080 for other containers"}],"\n",["$","li",null,{"children":["It runs ",["$","code",null,{"children":"gulp build"}]," during image creation"]}],"\n"]}],"\n",["$","p",null,{"children":"This Dockerfile also installs production-only Python pip dependencies in\nrequirements.txt."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"# Install apt, Python then NodeJS dependencies.\nRUN             apt-get update && \\\n                curl -sL https://deb.nodesource.com/setup_0.12 | bash - && \\\n                apt-get install -y nodejs && \\\n                pip install --upgrade pip && \\\n                pip install -r \\\n                    environments/prod/requirements.txt && \\\n                npm update && \\\n                npm install -g gulp && \\\n                npm install && \\\n                gulp build\n# Exposes port 8080\nEXPOSE          8080\n"}]}],"\n",["$","p",null,{"children":["When Docker runs the image build, it runs ",["$","code",null,{"children":"gulp build"}],", which runs code-quality,\nunit tests and produces production-ready web frontend assets. This allows for\ntesting prior to deployment, and gives the team an opportunity to fix errors\nbefore they go into the wild."]}],"\n",["$","h2",null,{"children":"Elastic Beanstalk specific structure"}],"\n",["$","p",null,{"children":"Finally, these comments describe files related to Amazons’ Elastic Beanstalk:"}],"\n",["$","p",null,{"children":".dockerignore\n.ebextensions/           # Describes how EB builds environments\n01_envvars.config      # Describes env vars for AWS Docker containers\n.ebignore                # Describes how Amazon EB ignores some files\n.elasticbeanstalk/       # Location Amazon EB stores its cli settings\nDockerrun.aws.json       # Describes how to run our containers in AWS\n.gitignore\n.bowerrc\n.csslintrc.json\n.jshintrc\nbower.json\ngulpfile.js\npackage.json\napp/\napps/*\nproject/*\ndist/*\nbin/*\ndocker/\ndjango/\ndev/\ndocker-compose.yml\nDockerfile\nprod/\ndocker-compose.yml\nDockerfile\ngunicorn.conf.py\nstart.sh\nnginx/*\nenvironments/\ndev/\n.env\n.env.example\nProcfile\nrequirements.txt\nprod/\n.env\n.env.example\nProcfile\nrequirements.txt"}],"\n",["$","h3",null,{"children":".ebextensions/01_envvars.config"}],"\n",["$","p",null,{"children":"This file is used by the Elastic Beanstalk command line utilities to pass\nkey-value parameters to Amazon EC2 and ECS. This file is used to store all\nproduction environment variables that are provided to running containers. This\nvariables often vary between deployments."}],"\n",["$","h3",null,{"children":".ebignore"}],"\n",["$","p",null,{"children":["When Elastic Beanstalk does a deployment, it creates a zip file of the current\ndirectory, uploads it to Amazon S3, and deploys the files to running EC2\ninstances. Since this project is using Docker images to package the app, we can\nignore most files; with the exception of the ",["$","code",null,{"children":"app/dist"}]," directory— which\nboth “Django” and “Nginx” containers will need access too."]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":".ebignore"}]," file is used to ignore certain files in a project directory.\nThis file works like a ",["$","code",null,{"children":".gitignore"}]," file."]}],"\n",["$","h1",null,{"children":"Ignore everything!"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{}],"\n"]}],"\n",["$","h1",null,{"children":"Except for these exclusion patterns required by Amazon ECS"}],"\n",["$","p",null,{"children":["!Dockerrun.aws.json\n!.ebextensions/",["$","em",null,{"children":".config\n!.elasticbeanstalk/"}],".cfg.yml\n!.elasticbeanstalk/*.global.yml\n!app/dist/**\n!docker/**"]}],"\n",["$","p",null,{"children":["The only files our EB package should contain are those required by Docker,\nElastic Beanstalk itself, or any files shared between both containers (such as\nthe ",["$","code",null,{"children":"app/dist"}]," directory)."]}],"\n",["$","p",null,{"children":["When you deploy your project directory to Elastic Beanstalk and create a new\napplication version, the EB CLI will not include files specified by the\n",["$","code",null,{"children":".ebignore"}]," in the source bundle that it creates. This is useful for creating\nsmaller packages by excluding files that aren’t required for running\nproduction-only code."]}],"\n",["$","h3",null,{"children":".elasticbeanstalk/"}],"\n",["$","p",null,{"children":"Elastic Beanstalk uses this directory to store temp files and configuration\ninformation about the current AWS account, EB Application name and IAM\ncredentials to utilize."}],"\n",["$","h3",null,{"children":"Dockerrun.aws.json"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Dockerrun.aws.json"}]," is a proprietary Amazon-specific JSON format called a\n“",["$","a",null,{"href":"#task-def","children":"Task Definition"}],"” used to configure how to manage Docker containers\nrunning on Amazon EC2 Container Service (ECS) platform."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-json","children":"\"containerDefinitions\": [\n{\n    \"name\": \"django\",\n    \"image\": \"0xadada/dockdj:latest\",\n    \"essential\": true,\n    \"memory\": 512,\n    \"mountPoints\": [\n        {\n            \"sourceVolume\": \"gunicorn-conf\",\n            \"containerPath\": \"/etc/gunicorn/gunicorn.conf.py\",\n            \"readOnly\": true\n        }\n    ]\n}\n"}]}],"\n",["$","p",null,{"children":["The JSON format is very similar to the docker-compose Yaml format, having a\nnearly 1-to-1 mapping of ",["$","code",null,{"children":"image"}],", ",["$","code",null,{"children":"mountPoints"}]," to volumes and ports all\ndefined."]}],"\n",["$","p",null,{"children":["This file is functionally identical to ",["$","code",null,{"children":"docker/prod/docker-compose.yml"}]," in that\nit runs, configures and connects the “Django” and “Nginx” Docker containers. As\nsuch, changes to the ",["$","code",null,{"children":"docker-compose.yml"}]," file should be mirrored in the\n",["$","code",null,{"children":"Dockerrun.aws.json"}]," file."]}],"\n",["$","h2",null,{"children":"Lifecycle"}],"\n",["$","p",null,{"children":"New developers to this project simply clone the project from GitHub, install\nDocker (and boot2docker/docker-machine on OS X) and can begin running the app.\nThere is no need to setup a developer environment or create (yet) another VM."}],"\n",["$","h3",null,{"children":"Development"}],"\n",["$","p",null,{"children":"When the developer starts working on the project from scratch, the only\nrequirement is Docker and a machine capable of running Docker containers (Linux\n3+ or boot2docker/docker-machine)."}],"\n",["$","p",null,{"children":"Once an organization or developer has adopted Docker for a single project,\nstartup time for other docker projects is drastically reduced as this core\nrequirement has already been met. From that point forward, the projects\nthemselves can define and provision their own dependencies."}],"\n",["$","p",null,{"children":"For this project, the next steps required of the developer are as follows:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"git clone <PROJECT>\n<create .env file>\n.bin/stevedore dev start\n"}]}],"\n",["$","p",null,{"children":"The developer is now running the app. Any internal OS configuration, system\nlibraries, software dependencies and provisioning are all handled by the project\nand Docker— transparently to the developer."}],"\n",["$","p",null,{"children":"Subsequent context-switches between other projects and this project have been\nreduced to a single command:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":".bin/stevedore dev start\n"}]}],"\n",["$","p",null,{"children":"The developer doesn’t need to boot up a VM, nor does she/he need to understand\nor start any internal processes or run any commands internal to the VM."}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"In development, Docker can be used to lower cognitive load on developers\nswitching between multiple projects."}]}],"\n",["$","h3",null,{"children":"QA"}],"\n",["$","p",null,{"children":["In this particular project, QA tests are run during build of the the production\nDocker image via the ",["$","code",null,{"children":"gulp build"}]," task. See\n",["$","a",null,{"href":"#dockerdjangoproddockerfile","children":"the production Dockerfile"}]," to view how it calls\nthe gulp task."]}],"\n",["$","p",null,{"children":"In effect, this will prevent developers or continuous Integration systems from\npublishing a production Docker image to Docker Hub, as the build will trigger a\nDocker image build failure."}],"\n",["$","p",null,{"children":"More generally, development teams could create different tags for “production”\nreleases and “development” Docker image releases. Lets say “prod” vs “dev”."}],"\n",["$","p",null,{"children":["Development teams could publish images tagged with “dev”, to Docker Hub. Other\ndevelopers on the team or members of the QA team could ",["$","code",null,{"children":"docker pull"}]," that tagged\nimage and run their suite of tests on it."]}],"\n",["$","p",null,{"children":["Using Docker in this manner, dev and QA teams no longer have to keep VM\nconfigurations synchronized, as the OS and other dependencies have been pushed\ndown from VM directly into dependencies within the scope of the project. ",["$","strong",null,{"children":"This\nhas the effect of reducing manual synchronization and de-necessitating\nout-of-channel communication between development and QA teams about the state of\nthe runtime environment."}]," This allows for faster, less-error-prone iteration of\nthe runtime environment."]}],"\n",["$","h3",null,{"children":"Production"}],"\n",["$","p",null,{"children":"Developers have iterated on functionality, QA has run tests against the code,\nand the projects is ready for deployment to production."}],"\n",["$","p",null,{"children":"At this point, a working Docker image has been run on developers local machines,\nand QA has passed. These three phases could’ve gone through multiple iterations\nwhile bugs were identified and fixed. The end result is a working Docker image\nexists that has been deemed “ready” for production."}],"\n",["$","p",null,{"children":"Either manually or as part of a continuous integration tool, the\nproduction-ready Docker image can now be tagged with a release version and\npublished to Docker Hub (or other compatible Docker image repository). Finally,\nthe deploy process needs to update the production servers running our working\napplication stack and run the latest application code."}],"\n",["$","p",null,{"children":["These tasks are handled by our ",["$","code",null,{"children":"bin/deploy"}]," script, a wrapper for Docker, Git\nand Elastic Beanstalk. It will tag the latest Docker image, publish the tag to\nDocker Hub, tag the publish the tags to GitHub and use Elastic Beanstalk to\ndeploy both the latest stack and application code:"]}],"\n",["$","p",null,{"children":"(Lets use 1.2.3 as an arbitrary version number for this example)"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"bin/deploy release 1.2.3 # Create a release branch and tag the image\nbin/deploy publish 1.2.3 # Publish the Docker image and git branch\n                         # to Docker Hub and GitHub\nbin/deploy deploy 1.2.3  # Use EB to deploy the latest release\n"}]}],"\n",["$","p",null,{"children":"The deploy script is a light bash wrapper that automates Git, Docker and Elastic\nBeanstalk commands in an easy-to-reproduce set of short commands."}],"\n",["$","p",null,{"children":["Once complete, the Amazon environment will be running your latest application\ncode, as well as any new changes to the container OS, system libraries and\ndependencies. Most importantly, ",["$","strong",null,{"children":"any changes in provisioning to the stack have\nbeen deployed along with the Docker image"}],", thus enabling seamless roll-backs.\n",["$","strong",null,{"children":"Rolling back the application version will also rollback the stack version"}],".\nThe application and stack are deployed together."]}],"\n",["$","p",null,{"children":"Happy cloud computing!"}],"\n",["$","h2",null,{"children":"Terms"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"autoscaling","children":["$","em",null,{"children":"Auto-scaling"}]}]," A method of setting a threshold that\ndetects when the load on a server cluster necessitates adding or removing\nservers in order to optimize the number of servers servicing that load.\nAuto-scaling allows an organization to decrease operating costs by running the\nminimum number of servers required to service its load, and eliminating the\nneed to accurately predict future traffic patterns."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"config-mgmt","children":["$","em",null,{"children":"Configuration Management"}]}]," Software tools that are\ndesigned to automatically start, provision and configure software on virtual\nmachines rather than have engineers run these steps manually on each server.\nThese tools can be used both locally to create development VMs (virtual\nmachines) as well as in the cloud to create staging and production VMs."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"docker-image","children":["$","em",null,{"children":"Docker image"}]}]," A docker image is like an executable\nprogram binary. It takes source files and other assets and bundles them\ntogether, and the resulting bundle can be run/executed as a single process on\na Linux machine."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"docker-container","children":["$","em",null,{"children":"Docker container"}]}]," A docker container is like a\nrunning executable program. It is a running instance of a docker image. Like a\nrunning program, it has a PID, and it is appropriate to call it a process. It\ncan be started and stopped. One docker image can be run many times on one or\nmore machines."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"provisioning","children":["$","em",null,{"children":"Provisioning"}]}]," The installation and configuration\nof software needed to run an application. E.g. Installing and configuring\nApache and its system libraries in order to run WordPress."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":[["$","a",null,{"name":"task-def","children":["$","em",null,{"children":"Task definition"}]}]," A proprietary JSON format for\ndescribing how Docker containers are run within the Amazon EC2 Cloud Service.\nRead more about\n",["$","a",null,{"href":"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html","children":"Amazon ECS Task Definitions"}],".\nDocker uses the ",["$","a",null,{"href":"https://docs.docker.com/compose/yml/","children":"docker-compose Yaml"}],"\nfile to do the same thing."]}],"\n"]}],"\n"]}],"\n",["$","section",null,{"data-footnotes":true,"className":"footnotes","children":[["$","h2",null,{"className":"sr-only","id":"footnote-label","children":"Footnotes"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"id":"user-content-fn-1","children":["\n",["$","p",null,{"children":["Configuration management tools can be used to couple both Stack and\nApplication, but experience has has shown that over time, these tools\nare not strongly opinionated, and therefore Stack-App decoupling occurs\norganically over the lifetime of a project. ",["$","a",null,{"href":"#user-content-fnref-1","data-footnote-backref":true,"className":"data-footnote-backref","aria-label":"Back to content","children":"↩"}]]}],"\n"]}],"\n",["$","li",null,{"id":"user-content-fn-2","children":["\n",["$","p",null,{"children":["Docker runs on Linux version 3. In the case where the developer is\nusing OS X, Windows or another non-Linux OS, they’ll need to run a Linux\nVM in order to use Docker. However, this single VM will be able to run\nall Docker containers for all Docker projects they use. Tools like\nDocker Machine make working with the Docker VM much simpler. ",["$","a",null,{"href":"#user-content-fnref-2","data-footnote-backref":true,"className":"data-footnote-backref","aria-label":"Back to content","children":"↩"}]]}],"\n"]}],"\n"]}],"\n"]}]]}],["$","footer",null,{"className":"license_copyright__EpMnZ","children":["This is licensed under a Creative Commons ","cc-by-nc-sa"," International License"]}]]}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Development Lifecycle with Docker and Elastic Beanstalk"}],["$","meta","3",{"name":"description","content":"This article explains the advantages of using Docker over automated configuration management tools, and describes a workflow from development through QA and into production deployment using Amazons' Elastic Beanstalk."}],["$","link","4",{"rel":"author","href":"https://0xadada.pub"}],["$","meta","5",{"name":"author","content":"0xADADA"}],["$","meta","6",{"name":"keywords","content":"essays,software-engineering"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://0xadada.pub/rss.xml"}],["$","meta","8",{"property":"og:title","content":"Development Lifecycle with Docker and Elastic Beanstalk"}],["$","meta","9",{"property":"og:description","content":"This article explains the advantages of using Docker over automated configuration management tools, and describes a workflow from development through QA and into production deployment using Amazons' Elastic Beanstalk."}],["$","meta","10",{"property":"og:url","content":"https://0xadada.pub/2015/11/03/development-lifecycle-with-docker-and-elastic-beanstalk/"}],["$","meta","11",{"property":"og:site_name","content":"0xADADA"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://0xadada.pub/static/images/meta/avatar.svg"}],["$","meta","14",{"property":"og:image:width","content":"660"}],["$","meta","15",{"property":"og:image:height","content":"660"}],["$","meta","16",{"property":"og:type","content":"article"}],["$","meta","17",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","18",{"name":"twitter:title","content":"Development Lifecycle with Docker and Elastic Beanstalk"}],["$","meta","19",{"name":"twitter:description","content":"This article explains the advantages of using Docker over automated configuration management tools, and describes a workflow from development through QA and into production deployment using Amazons' Elastic Beanstalk."}],["$","meta","20",{"name":"twitter:image","content":"https://0xadada.pub/static/images/meta/avatar.svg"}],["$","meta","21",{"name":"twitter:image:width","content":"660"}],["$","meta","22",{"name":"twitter:image:height","content":"660"}],["$","link","23",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"48x48"}],["$","link","24",{"rel":"apple-touch-icon","href":"/apple-icon.png?b764b3a1dbf00a82","type":"image/png","sizes":"180x180"}]]
1:null
